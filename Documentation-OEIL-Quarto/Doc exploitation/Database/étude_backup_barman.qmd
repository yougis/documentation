## Backuper les bases de données PostgreSQL

Le système de dump de PostgreSQL pour backuper une base de données possède énormément d’avantages. Il est compact, compressible, portable, flexible, consistent et permet de tester la structure de la base de données au moment du backup. Cependant, même si le dump peut être exécuté pendant que la base est utilisée, celle-ci risque d’être fortement ralentie. De même, la restauration d’un backup prend beaucoup de temps et en cas de crash, toutes les données saisies entre le backup et le crash seront perdues. Ce système de backup via dump est déjà mis en place, mais à mesure que la base grandie, la taille des fichiers de backup augmentent. La durée de backup est maintenant de plus d’une heure et cela ne va faire que croître.

Il existe un autre moyen de backuper une base de données volumineuse, le PITR (Point In Time Recovery). Cette mécanique s’appuie sur une sauvegarde des volumes PostgreSQl (fichiers de données) plutôt qu’un script SQL pour réécrire toutes les lignes. PostgreSQl enregistre les nouvelles données dans des fichiers WAL (Write Ahead Log), sous forme de logs, afin de garder une trace de chaque nouvelle donnée. En backupant une première fois l’ensemble des fichiers systèmes puis en ne récupérant que les fichiers WAL régulièrement, on peut réussir à backuper une base de données entière et la reconstruire à partir du backup initial et des logs. Ce type de sauvegarde est beaucoup plus rapide qu’un dump, puisque la seule limite est celle des disques et de la connexion. De plus, la sauvegarde de ces fichiers n’a aucun impact sur les performances de la base et peuvent donc être effectués plus régulièrement, même lorsque des utilisateurs ajoutent de la nouvelle donnée. La restauration des données sera également plus rapides car les indexes ne sont pas recalculés. Avec ce système de logs, on peut également revenir à un état antérieur de la base, par exemple récupérer une table qui aurait été supprimée par inadvertance.

Cependant, cette stratégie a également des inconvénients, la taille du backup complet (backup initial + logs) correspond à la taille physique de la base de données. Ce backup n’est ni compressible, ni portable puisque la restauration ne marcherait que sur un système identique avec une version de PostgreSQL identique. Également, du fait que c’est une copie de fichiers, si la base de données se trouvent dans un état mauvais, avec par exemple des données incomplètes, la restauration reproduira les mêmes erreurs.

Les 2 stratégies ont donc des avantages et des inconvénients, le choix entre l’une et l’autre dépendra essentiellement selon les points suivants :
- Durée souhaitée de restauration : 1 à 2 jours
- Nouvelles données ou vue : quasiment tous les jours
- Nombre de backup quotidien : dépend des bases
- Tolérance à la perte de données : 1-2h pour les données les plus sensibles (photo-interprétation)
- Volumes disponibles pour les backups : 2To total mais 1,5To dispo en Cloud Novatech, 1To en local
- Possibilité de monter de version PostgreSQL : pas de besoin particulier de monter de version
- Backuper qu’une partie des bases de données : certaines bases n’ont pas besoin de backup régulier
- Possibilité d’utiliser la base pendant le backup : OUI

D’après nos cas d’usage, il serait donc préférable de partir sur un solution de backup de type PITR comme Barman.

Sources :
- Continuous Archiving and Point-in-Time Recovery (PITR)
- Managing PostgreSQL backup and replication for very large databases
- Managing PostgreSQL backups and replication for very large databases — Part 2
- Barman : un outil open-source pour backuper ses données via PITR